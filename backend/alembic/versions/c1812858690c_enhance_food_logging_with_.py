"""
Revision ID: c1812858690c
Revises: 1b61b2c9df31
Create Date: 2025-07-02 07:09:47.546122

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c1812858690c'
down_revision = '1b61b2c9df31'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('food_parsing_sessions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=False),
    sa.Column('user_input', sa.Text(), nullable=False),
    sa.Column('parsed_foods', sa.JSON(), nullable=True),
    sa.Column('extracted_datetime', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.add_column('food_logs', sa.Column('fiber_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('sugar_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_a_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_c_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_d_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_e_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_k_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b1_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b2_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b3_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b5_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b6_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b7_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b9_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('vitamin_b12_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('calcium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('iron_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('magnesium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('phosphorus_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('potassium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('sodium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('zinc_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('copper_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('manganese_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('selenium_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('chromium_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('molybdenum_mcg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('cholesterol_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('saturated_fat_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('trans_fat_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('polyunsaturated_fat_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('monounsaturated_fat_g', sa.Numeric(precision=6, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('serving_size', sa.String(), nullable=True))
    op.add_column('food_logs', sa.Column('meal_type', sa.String(), nullable=True))
    op.add_column('food_logs', sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=True))
    op.add_column('food_logs', sa.Column('source', sa.String(), nullable=True))
    op.add_column('food_logs', sa.Column('search_queries', sa.JSON(), nullable=True))
    op.alter_column('food_logs', 'protein_g',
               existing_type=sa.INTEGER(),
               type_=sa.Numeric(precision=6, scale=2),
               existing_nullable=True)
    op.alter_column('food_logs', 'fat_g',
               existing_type=sa.INTEGER(),
               type_=sa.Numeric(precision=6, scale=2),
               existing_nullable=True)
    op.alter_column('food_logs', 'carbs_g',
               existing_type=sa.INTEGER(),
               type_=sa.Numeric(precision=6, scale=2),
               existing_nullable=True)
    op.add_column('hr_sessions', sa.Column('avg_hr', sa.Integer(), nullable=True))
    op.add_column('hr_sessions', sa.Column('max_hr', sa.Integer(), nullable=True))
    op.add_column('hr_sessions', sa.Column('min_hr', sa.Integer(), nullable=True))
    op.add_column('hr_sessions', sa.Column('duration_minutes', sa.Integer(), nullable=True))
    op.add_column('hr_sessions', sa.Column('session_data', sa.JSON(), nullable=True))
    op.add_column('hr_sessions', sa.Column('logged_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_column('hr_sessions', 'min_bpm')
    op.drop_column('hr_sessions', 'ended_at')
    op.drop_column('hr_sessions', 'avg_bpm')
    op.drop_column('hr_sessions', 'raw_json')
    op.drop_column('hr_sessions', 'started_at')
    op.drop_column('hr_sessions', 'max_bpm')
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('hr_sessions', sa.Column('max_bpm', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('hr_sessions', sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('hr_sessions', sa.Column('raw_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('hr_sessions', sa.Column('avg_bpm', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('hr_sessions', sa.Column('ended_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('hr_sessions', sa.Column('min_bpm', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('hr_sessions', 'logged_at')
    op.drop_column('hr_sessions', 'session_data')
    op.drop_column('hr_sessions', 'duration_minutes')
    op.drop_column('hr_sessions', 'min_hr')
    op.drop_column('hr_sessions', 'max_hr')
    op.drop_column('hr_sessions', 'avg_hr')
    op.alter_column('food_logs', 'carbs_g',
               existing_type=sa.Numeric(precision=6, scale=2),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('food_logs', 'fat_g',
               existing_type=sa.Numeric(precision=6, scale=2),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('food_logs', 'protein_g',
               existing_type=sa.Numeric(precision=6, scale=2),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('food_logs', 'search_queries')
    op.drop_column('food_logs', 'source')
    op.drop_column('food_logs', 'confidence_score')
    op.drop_column('food_logs', 'meal_type')
    op.drop_column('food_logs', 'serving_size')
    op.drop_column('food_logs', 'monounsaturated_fat_g')
    op.drop_column('food_logs', 'polyunsaturated_fat_g')
    op.drop_column('food_logs', 'trans_fat_g')
    op.drop_column('food_logs', 'saturated_fat_g')
    op.drop_column('food_logs', 'cholesterol_mg')
    op.drop_column('food_logs', 'molybdenum_mcg')
    op.drop_column('food_logs', 'chromium_mcg')
    op.drop_column('food_logs', 'selenium_mcg')
    op.drop_column('food_logs', 'manganese_mg')
    op.drop_column('food_logs', 'copper_mg')
    op.drop_column('food_logs', 'zinc_mg')
    op.drop_column('food_logs', 'sodium_mg')
    op.drop_column('food_logs', 'potassium_mg')
    op.drop_column('food_logs', 'phosphorus_mg')
    op.drop_column('food_logs', 'magnesium_mg')
    op.drop_column('food_logs', 'iron_mg')
    op.drop_column('food_logs', 'calcium_mg')
    op.drop_column('food_logs', 'vitamin_b12_mcg')
    op.drop_column('food_logs', 'vitamin_b9_mcg')
    op.drop_column('food_logs', 'vitamin_b7_mcg')
    op.drop_column('food_logs', 'vitamin_b6_mg')
    op.drop_column('food_logs', 'vitamin_b5_mg')
    op.drop_column('food_logs', 'vitamin_b3_mg')
    op.drop_column('food_logs', 'vitamin_b2_mg')
    op.drop_column('food_logs', 'vitamin_b1_mg')
    op.drop_column('food_logs', 'vitamin_k_mcg')
    op.drop_column('food_logs', 'vitamin_e_mg')
    op.drop_column('food_logs', 'vitamin_d_mcg')
    op.drop_column('food_logs', 'vitamin_c_mg')
    op.drop_column('food_logs', 'vitamin_a_mcg')
    op.drop_column('food_logs', 'sugar_g')
    op.drop_column('food_logs', 'fiber_g')
    op.drop_table('food_parsing_sessions')
    # ### end Alembic commands ### 